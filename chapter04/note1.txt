# Copyright @ Max Zhao
1.[root]# ./p.sh max
max
[root]# ./p.sh max zhx
max
[root]# ./p.sh "max zhao"
max zhao

2.[root]# cat p.sh 
echo $1 $2
[root]# ./p.sh max zhao
max zhao
[root]# ./p.sh "max zhao"
max zhao
[root]# ./p.sh "max zhao" "cool boy"
max zhao cool boy

3.[root]# echo \${1..15} #<==利用大括号输出15个位置参数
$1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15
[root]# echo \${1..15} > n.sh #<==利用大括号输出15个位置参数并定向到文件n.sh里
[root]# ls
notes.txt  n.sh  p.sh
[root]# cat n.sh 
$1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15
[root]# vim n.sh 
[root]# cat n.sh 
echo $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 #<==增加echo命令打印所有参数
[root]# echo {a..z} #<==测试打印26个字母并以空格分隔
a b c d e f g h i j k l m n o p q r s t u v w x y z
[root]# sh n.sh {a..z} #<==传入26个字母，以空格分隔作为26个参数
a b c d e f g h i a0 a1 a2 a3 a4 a5 #<==位置参数大于9后，输出的内容就不对了
[root]# vim n.sh 
[root]# cat n.sh #<==当位置参数数字大于9时，需要用大括号将数字括起来
echo $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11} ${12} ${13} ${14} ${15}
[root]# sh n.sh {a..z}
a b c d e f g h i j k l m n o

4.[root]# cat s0.sh 
echo $0
[root]# sh s0.sh #<== $0作用是取出脚本的名称（包括路径）；若不带路径执行脚本，输出结果就是脚本名字 
s0.sh
[root]# pwd
/root/Shell/chapter04
[root]# sh /root/Shell/chapter04/s0.sh #<==使用全路径执行脚本，结果就是全路径加
脚本名字 
/root/Shell/chapter04/s0.sh
[root]# dirname /root/Shell/chapter04/s0.sh #<==dirname 命令作用是获取脚路径 
/root/Shell/chapter04
[root]# basename /root/Shell/chapter04/s0.sh #<==basename 命令作用是获取脚本名
s0.sh

5.[root]# cat ns.sh #<== 利用$0和dirname、basename分别取出脚本名和脚本路径 
dirname $0
basename $0
[root]# pwd
/root/Shell/chapter04
[root]# sh /root/Shell/chapter04/ns.sh 
/root/Shell/chapter04
ns.sh

6.$# 特殊变量获取脚本传参个数
[root]# cat q.sh 
echo $1 $2 $3 $4 $5 $6 $7 $8 $9
echo $#
[root]# sh q.sh {a..z}
a b c d e f g h i #<==只接收了9个变量，所以打印9个字符
26 #<==传入26个字符作为26个参数，因此这里打印26

7.判断传参个数的脚本案例(条件表达式判断语句的写法)：
[root]# cat t1.sh 
[ $# -ne 2 ] && {     #<==如果用户传入参数个不等于2
	echo "please input two args" #<==提示正确用法
	exit 1    #<==由于不符合条件，退出脚本，返回值为 1
}
echo "Hello! MaxZhao" #<==满足传参个数的条件后能走到这里，打印问候语
[root]# sh t1.sh 
please input two args
[root]# sh t1.sh arg1 arg2
Hello! MaxZhao

8.判断传参个数的脚本案例(if判断语句的写法)：
[root]# cat t2.sh 
if [ $# -ne 2 ] #<==如果执行传参个数不等于2
	then
	  echo "USAGE:/bin/sh $0 arg1 arg2" #<==给用户提示正确用法，$0打印脚本名
字及路径
	  exit 1  #<==如果不满足要求，退出脚本，返回值为1
fi
echo $1 $2  #<==若参数满足要求，则打印$1和$2获取到的传参的字符串
[root]# sh t2.sh 
USAGE:/bin/sh t2.sh arg1 arg2
[root]# sh t2.sh "Hello" "Max"
Hello Max

9.$* 和 $@ 特殊变量功能及区别说明
[root]# set -- "I am" Max Zhao #<==通过set设置三个字符串参数，“--”表示清除所有参
数变量，重新设置后面的参数变量
[root]# echo $#  #<==输出参数个数
3
[root]# echo $1
I am
[root]# echo $2
Max
[root]# echo $3
Zhao
[root]# echo $*  #<==打印$*，不带双引号
I am Max Zhao
[root]# echo $@  #<==打印$@，不带双引号
I am Max Zhao
[root]# for i in $*;do echo $i;done  #<==遍历$*不加双引号，输出所有参数，"I am"
也被拆开输出了
I
am
Max
Zhao
[root]# for i in $@;do echo $i;done  #<==遍历$@不加双引号，结果同上
I
am
Max
Zhao
[root]# for i in "$*";do echo $i;done  #<==遍历"$*"带双引号，将所有参数当做一个
参数输出了
I am Max Zhao
[root]# for i in "$@";do echo $i;done  #<==遍历"$@"带双引号，会以独立的形式输出
每个参数，符合传参需求
I am
Max
Zhao
[root]# for i;do echo $i;done  #<==去掉in 变量列表，相当于有双引号的 in "$@"
I am
Max
Zhao
[root]# shift  #<==用 shift 将参数左移一位
[root]# echo $#
2
[root]# echo $1  #<==这里打印原来$2的值了
Max
[root]# echo $2
Zhao
[root]# echo $3  #<==$3的值没了

[root]# echo $0
-bash

10.$?特殊变量功能
[root]# pwd
/root/Shell/chapter04
[root]# echo $?  #<== $?为0说明上一个命令的执行是成功的
0
[root]# ls /root
Shell
[root]# echo $?
0
[root]# ls /unexists
ls: 无法访问/unexists: 没有那个文件或目录
[root]# echo $?  #<== $?非0，说明上一个命令执行错误，对于不同的错误返回值不同
2
[root]# unexistsorder
-bash: unexistsorder: 未找到命令
[root]# echo $?  #<== $? 非0说明上一个命令执行错误
127
工作场景中，常用的就是0代表成功，非0代表运行失败；比如使用$?判断源码安装是否成功
当对服务器的数据进行备份时，我们会在执行完关键命令，如tar或cp后，通过获取返回值
拉力判断命令是否成功，备份数据是否完整。

11.[root]# cat t3.sh 
[ $# -ne 2 ] && {
echo "must be two args."  #<==若参数不等于2，则输出提示
exit 119  #<==终止程序运行并以指定的119状态值退出程序，赋值给当前Shell的 "$?" 变
量
}
echo "hello! Max Zhao"
[root]# sh t3.sh 
must be two args.
[root]# echo $?
119
[root]# sh t3.sh a b 
hello! Max Zhao
[root]# echo $?
0

12.企业场景中,"$?"返回值用法如下：
  1)判断命令、脚本或函数等程序是否执行成功。
  2)若再脚本中调用执行"exit 数字"，则会返回这个数字给"$?"变量。
  3)如果实在函数里，则通过"return数字"把这个数字以函数返回值的形式传给"$?"。

13.$$变量功能
[root]# cat test_pid.sh 
echo $$ > /tmp/a.pid  #<==获取$$的值，并重定向到/tmp/a.pid里
sleep 300  #<==休息300秒，模拟守护进程不退出
[root]# ps -ef|grep test_pid|grep -v grep
[root]# sh test_pid.sh &  #<==在后台运行脚本，&符号表示再后台运行
[1] 11582		  #<==这是脚本的进程号
[root]# ps -ef|grep test_pid|grep -v grep
root     11582 11488  0 08:29 pts/1    00:00:00 sh test_pid.sh  #<==获取脚本的进
程号
[root]# cat /tmp/a.pid 
11582  #<==这是$$对应的值，$$就是获取当前执行的Shell脚本的进程号

14.$$实现系统多次执行某一个脚本后的进程只有一个
[root]# cat pid.sh 
# !/bin/sh
pidpath=/tmp/a.pid  #<==定义pid文件
if [ -f "$pidpath" ]  #<==如果pid文件存在，则执行then后面的命令
    then
        kill `cat $pidpath` > /dev/null 2>&1  #<==杀掉与前一个进程号对应的进程
	rm -rf $pidpath  #<==删除pid文件
fi
echo $$ > $pidpath
sleep 300
[root]# ps -ef|grep pid.sh |grep -v grep
[root]# sh pid.sh 
^Z
[1]+  已停止               sh pid.sh
[root]# bg 1
[1]+ sh pid.sh &
[root]# ps -ef|grep pid.sh |grep -v grep  #<==查看启动的脚本进程
root     11601 11488  0 08:37 pts/1    00:00:00 sh pid.sh  #<==只有一个
[root]# sh pid.sh &  #<==多次运行脚本，每次都会将上一次运行的脚本杀掉
[2] 11606
[root]# sh pid.sh &
[3] 11610
[1]   已终止               sh pid.sh
[root]# sh pid.sh &
[4] 11614
[2]   已终止               sh pid.sh
[root]# sh pid.sh &
[5] 11618
[3]   已终止               sh pid.sh
[root]# ps -ef|grep pid.sh |grep -v grep  #<==无论运行多少脚本，都只有一个进程
root     11618 11488  0 08:37 pts/1    00:00:00 sh pid.sh
[4]-  已终止               sh pid.sh
[root]# ps -ef|grep pid.sh |grep -v grep
root     11618 11488  0 08:37 pts/1    00:00:00 sh pid.sh

15.$_特殊变量功能，获得上一条命令的最后一个参数
[root]# echo \${1..15}
$1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15
[root]# echo $_
$15

16.$!功能类似于$$，只不过作用是获取上一次执行脚本的pid
[root]# ps -ef | grep pid.sh |grep -v grep
[root]# sh pid.sh &
[1] 11647
[root]# echo $!
11647
[root]# ps -ef | grep pid.sh |grep -v grep
root     11647 11488  0 08:46 pts/1    00:00:00 sh pid.sh

