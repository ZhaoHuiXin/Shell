1.环境变量（全局变量），普通变量（局部变量）

2.set 输出所有变量，包括全局和局部 set|tail 默认查看倒数10条
env 只显示全局变量 env|tail
declare 输出所有的变量、函数、整数和已经导出的变量 
set -o 显示 bash Shell 所有参数配置信息  set -o | head 显示前10 条信息

3.3种方法设置环境变量
export 变量名=value
变量名=value ; export 变量名
declare -x 变量名=value

4.对于用户的环境变量设置，比较常见的是家目录下的.bashrc和.bash_profile，推荐在.bashrc中优先设置

5.常见全局变量配置文件：
/etc/profile
/etc/bashrc  推荐在此文件中优先设置
/etc/porfile.d/ 
若要在登陆后初始化或显示加载内容，把脚本文件放在/etc/profile.d/ 下即可（无须加执行权限 x）

6.设置登录提示：
第一种是在/etc/motd 文件里增加提示的字符串，文件里仅为字符串内容
第二种是在/etc/profile.d/目录下增加.sh脚本，脚本内容如 echo "here is zhx training"

7.在写shell脚本时可以直接使用系统默认的环境变量，一般不需要重新定义；在使用定时任务等执行shell脚本时建议在脚本中重新定义。

8.常见系统环境变量：
$HOME:用户登录时进入的目录
$UID:当前永不的UID（用户标识），相当于id-u
$SHELL:当前shell
$PWD:当前工作目录的绝对路径
$USER: 当前用户

9.环境(全局)变量小结:
	变量名通常大写
	变量可以在自身的Shell及子Shell中使用
	常用export来定义环境变量
	执行env默认显示素有环境变量名称及对应值
	输出时用“$变量名”，取消时用“unset 变量名”，注意没有$
	书写crond定时任务要注意，脚本要用到的环境变量最好陷在所执行的Shell脚本中重新定义
	如果希望环境变量永久生效，将其放在用户环境变量文件或全局环境变量文件中

10.系统运行Shell的方式一般有3种：
	通过系统用户登录后默认运行的Shell
	非登陆交互式运行Shell
	执行脚本运行非交互式Shell

11.对于登录用户，环境变量初始化及对应文件的生效顺序为：
	/etc/profile ==> /etc/profile.d/*.sh 
	==> $HOME/.bash_profile ==> $HOME/.bashrc
	==> /etc/bashrc

12.如果用户的Shell不是登录时启动的（比如手动敲下bash时启动或者其他不需要输入密码的登录以及远程ssh连接的情况）：
	$HOME/.bashrc（用户环境变量文件） ==> /etc/bashrc （全局环境变量文件）
	因此如果希望在非登陆Shell下也可以读到设置的环境变量等内容，就需要将变量设定等写入$HOME/.bashrc 或者 /etc/bashrc，而不是 $HOME/.bash_profile 
或 /etc/profile

13.$变量名 表示输出变量，可以用$c和${c}两种方法，如：
	c=192.168.1.2 
	echo "c=${c}"
	将连续的普通字符串的内容赋值给变量，不管用不用引号，用什么引号，它的内容是什么，打印变量时就会输出什么。

14.当内容为简单连续的数字、字符串、路径名时可以不加引号直接定义变量内容，不加引号时，值里有变量的会被解析后再输出。
    当用单引号定义变量内容时，所见即所得，用于不希望解析变量、命令等的场景。
    当用双引号定义变量内容时，输出变量内容时引号里的变量及命令会经过解析后再输出内容，而不是把双引号中的变量名及命令（命令需要` `反引起来）原样输出。
这种方式适合于字符串中带有变量及命令且想将其解析后再输出的变量定义。
    注：数字内容的变量定义可以不加引号，其他没有特别要求的字符串等定义最好都加上双引号，如果真的需要原样输出就加单引号；定义变量加双引号是最常见的使
用场景。

15.将命令结果作为变量内容赋值的方法：
    变量名=`ls`     #<==使用反引号将命令引起来
    变量名=$(ls)     #<==使用$()将命令括起来，常用

16.当变量后面连接有其他字符时，必须给变量加上大括号{}，如：
	# dbname="123456789"
	# echo $dbname 
	>> 123456789
	# echo $dbname_abcd 
	>>
	# echo ${dbname}_abcd 
	>> 123456789_abcd
    注：养成将所有字符串变量用{}括起来的习惯，在编程时会减少很多问题。

17.无引号，赋值时如果变量内容中有空格，会造成赋值不完整。输出内容时，会将含有空格的字符串视为一个整体来输出。
    ``一般用于引用命令，执行的时候命令会被执行，相当于$()，赋值和输出都要用``将命令引起来。
    双引号：输出双引号内的所有内容；如果内容中有命令（要反引下）、变量、特殊转义等，会先把变量、命令、转义字符解析出来，然后输出最终内容，这为弱引用。

18.awk获取shell变量，最好使用"'$**'" 的格式，对用单引号、双引号、反引号及不使用引号声明的变量均适用。
	awk 'BEGIN {print "'$ETT'"}'
19.更多的是先用echo加符号输出变量，然后通过管道传给awk，进而控制变量的输出结果。
	ETT="oldgirl"
	echo "$ETT" | awk '{print $0}'
	awk中$0代表全部，1代表第一个单词的位置
	# ETT=`date`
	# echo $ETT
	>> 2018年 06月 11日 星期一 08:54:21 CST
	# echo $ETT|awk '{print $0}'
	>> 2018年 06月 11日 星期一 08:54:21 CST
	# echo $ETT|awk '{print $1}'
	>> 2018年
	# echo $ETT|awk '{print $2}'
	>> 06月
	# echo $ETT|awk '{print $3}'
	>> 11日
	# echo $ETT|awk '{print $0}'
	>> 2018年 06月 11日 星期一 08:54:21 CST
	# echo $ETT|awk '{print $4}'
	>> 星期一
	# echo $ETT|awk '{print $5}'
	>> 08:54:21
	# echo $ETT|awk '{print $6}'
	>> CST
	# echo $ETT|awk '{print $7}'

20.通过sed指定变量关键字过滤
	[root@momentsYun chapter03]# cat sed.log
		testchars
		oldboy
	[root@momentsYun chapter03]# OLDBOY="testchars"
	[root@momentsYun chapter03]# sed -n /"$OLDBOY"/p sed.log 
		testchars
	[root@momentsYun chapter03]# sed -n /$OLDBOY/p sed.log 
		testchars
	[root@momentsYun chapter03]# sed -n /'$OLDBOY'/p sed.log 
	[root@momentsYun chapter03]# 
	结论和grep一样,唯有awk特殊

21.在打印输出和使用变量时，变量名前要接$符号；变量名后面紧接其他字符的时候，要用
大括号将变量部分单独括起来，防止出现“金庸新著”的问题；在unset、export、(())等场景中使用但不打印变量时不加$，这个有些例外。
