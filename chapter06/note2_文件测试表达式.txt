文件测试表达式
1.常用文件测试操作符
-d 文件，文件存在且为目录则为真
-f 文件，文件存在且为普通文件则为真
-e 文件，文件存在则为真，-e不辨别是目录还是文件
-r 文件存在且可读则为真
-s 文件存在且文件大小不为0则为真
-w 文件存在且可写则为真
-x 文件存在且可执行则为真
-L 文件存在且为链接文件则为真
f1 -nt f2, newer than 文件f1比文件f2新则为真。根据文件的修改时间来计算
f1 -ot f2，older than 文件f1比文件f2旧则为真。根据文件的修改时间来计算

2.文件测试表达式举例
当当前用户是root用户时，有两个比较特殊的地方，比如如果文件权限是001，逻辑上讲它不可读不可写
但是对于root用户，可以echo "echo test">test，这是可写的体现
cat test,这是可读的体现
总结：测试文件的rwx属性，不光是根据标识判断，还要看当前执行测试的用户是否真的可以按照对应的权限操作该文件

3.测试shell变量示例
☁  chapter06 [master] file1=/etc/services;file2=/etc/rc.local
☁  chapter06 [master] echo $file1 $file2
/etc/services /etc/rc.local
☁  chapter06 [master] [ -f "$file1" ]&& echo 1 || echo 2
1
☁  chapter06 [master] [ -d "$file1" ]&&echo 1 || echo 0
0
☁  chapter06 [master] [ -s "$file1" ]&&echo 1 || echo 0
1
☁  chapter06 [master] [ -e "$file1" ]&&echo 1 || echo 0
1
☁  chapter06 [master] [ -e /etc ]&& echo 1 || echo 0
1
☁  chapter06 [master] [ -w /etc/services ] &&echo 1 | echo 0
0
☁  chapter06 [master] ll /etc/services
-rw-r--r--. 1 root root 655K 6月   7 2013 /etc/services

4.测试时变量的特殊写法及问题
☁  chapter06 [master] ⚡  echo $maxx #<==这是一个不存在的变量

☁  chapter06 [master] ⚡  [ -f $max ]&&echo 1 || echo  0 #<==不加引号测试变量，变量不存在仍返回1，逻辑不对
1
☁  chapter06 [master] ⚡  [ -f "$max" ]&&echo 1 || echo  0 #<==加引号测试变量，正常了
0
如果是文件实体路径，那么加引号与不加引号的结果是一样的：
☁  chapter06 [master] ⚡  [ -f "/etc/services" ] &&echo 1 || echo 00 
1
☁  chapter06 [master] ⚡  [ -f /etc/services ] &&echo 1 || echo 0
1

5.实现系统bind启动脚本named：
[ -r /etc/sysconfig/network ] && . /etc/sysconfig/network
#<==若文件存在且可读，则加载/etc/sysconfig/network
[ -x /usr/sbin/$named ] || exit5 #<==如果/usr/sbin/$named不可执行，则退出

6.简单高效：
[ -x max ] && echo 1
#<==如果max可执行，则输出1；如果不可执行，则不做任何输出
[ -f /etc ] || echo 0
#<== 如果/etc是文件这一点不成立，则输出0；如果成立，则不做任何输出

7.系统脚本节选：
[ "${NETWORKING}" != "yes" ] && exit 6 #<==如果${NETWORKING}的变量内容不等于yes，则退出，返回值为6
[ -x /usr/sbin/rpc.nfsd ] || exit 5
#<== 如果/usr/sbin/rpc.nfsd的脚本不可执行，则返回值为5退出脚本。如果可执行，则不做任何输出。

8.以下写法适用于所有的条件测试表达式，是工作中常用的替代if语句的方法。判断条件测试表达式的条件成立
或不成立后，还需要继续执行多条命令语句的语法形式如下。
  例如：当条件1成立，同时执行命令123，不用if测试表达式的格式如下：
[ 条件1 ] &&{
  命令1
  命令2
  命令3
}
[[ 条件1 ]] && {
  命令1
  命令2
  命令3
}
test 条件1 &&{
  命令1
  命令2
  命令3
}
  注：如果命令都写在一行，那么每个命令都需要用分号结尾。
  同理：当条件不成立时，执行大括号中的多条命令，需要使用逻辑操作符"||"
  上面的判断相当于下面if语句的效果：
  if [ 条件1 ]
    then
      命令1
      命令2
      命令3
  fi
